#include <stdio.h>

//multiplicacion x2
int estadoActual[] = {1, 1, 2, 2};
int lecturas[] = {0, 1, 1, 0};
int escribe[] = {0, 0, 1, 1};
int estadoSig[] = {1, 2, 2, 1};
int mueveCabezal[] = {-1, -1, -1, -1};

/*
sumar binario +1
estadoActual=[1,1,2,2]
lecturas=[1,0,1,0]   
escribe=[0,1,1,0]
estadoSig=[1,2,2,2]
mueveCabezal=[-1,-1,-1,-1]
*/

struct Acciones {
    int escribir;
    int estado;
    int cabezal;
};

// Función para buscar el estado y la lectura
struct Acciones buscar(int estadoA, int lecturaA) {
    struct Acciones acciones = {0, 0, 0};
    int i=0;
    for (i = 0; i < 4; i++) {
        if (estadoA == estadoActual[i] && lecturaA == lecturas[i]) {
            printf("Debe escribir: %d va al estado nuevo: %d mueve el cabezal a: %d\n", 
                    escribe[i], estadoSig[i], mueveCabezal[i]);
            acciones.escribir = escribe[i];
            acciones.estado = estadoSig[i];
            acciones.cabezal = mueveCabezal[i];
            return acciones;
        }
    }
    return acciones; // En caso de que no se encuentre una acción
}

int main() {
    int cinta[] = {0, 0, 1, 0, 1, 0, 0, 1};
    int cabezal = 7;
    int estado = 1;

    printf("Numero actual: ");
    int j=0;
    for (j = 0; j < 8; j++) {
        printf("%d ", cinta[j]);
    }
    printf("\n");

    while (1) {
        if (cabezal >= 1) {
            printf("Estado actual %d valor en cinta %d ubicacion en cabezal: %d\n", 
                    estado, cinta[cabezal], cabezal);
            struct Acciones accionesLc = buscar(estado, cinta[cabezal]);
            cinta[cabezal] = accionesLc.escribir;
            estado = accionesLc.estado;
            cabezal += accionesLc.cabezal;
        } else {
            break;
        }
    }

    printf("Resultado final: ");
    int k=0;
    for (k = 0; k < 8; k++) {
        printf("%d ", cinta[k]);
    }
    printf("\n");

    return 0;
}
