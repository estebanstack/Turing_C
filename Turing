#include <stdio.h>
#include <math.h>

/* Configuraci칩n de la resta (-1) 
int estadoActual[] = {1, 1, 2, 2, 3};
int lecturas[] = {1, 0, 1, 0, 0};
int escribe[] = {0, 1, 0, 1, 0};
int estadoSig[] = {3, 3, 2, 2, 0};  // Estado 3 ahora asegura que se detenga correctamente
int mueveCabezal[] = {-1, -1, -1, -1, 0};  // Movimiento del cabezal
*/

/*division por 2
int estadoActual[] = {1, 1, 1, 1};
int lecturas[] = {1, 0, 1, 0};
int escribe[] = {1, 0, 0, 0};
int estadoSig[] = {1, 1, 0, 0};  // El estado 0 indica que la operaci칩n ha terminado
int mueveCabezal[] = {1, 1, 1, 1};  // Mueve siempre a la derecha
*/

/*multiplicacion x2
int estadoActual[] = {1, 1, 2, 2};
int lecturas[] = {0, 1, 1, 0};
int escribe[] = {0, 0, 1, 1};
int estadoSig[] = {1, 2, 2, 1};
int mueveCabezal[] = {-1, -1, -1, -1};
*/


/*sumar binario +1
int estadoActual[]={1,1,2,2};
int lecturas[]={1,0,1,0};
int escribe[]={0,1,1,0};
int estadoSig[]={1,2,2,2};
int mueveCabezal[]={-1,-1,-1,-1};
*/



int binario_a_decimal(int cinta[], int n) {
    int decimal = 0;
    int j=0;
    for ( j = 0; j < n; j++) {
        decimal += cinta[n - 1 - j] * pow(2, j);
    }
    return decimal;
}

struct Acciones {
    int escribir;
    int estado;
    int cabezal;
};

struct Acciones buscar(int estadoA, int lecturaA) {
    struct Acciones acciones = {0, 0, 0};
    int i=0;
    for (i = 0; i < 5; i++) {  // Se ajusta para que recorra todos los estados
        if (estadoA == estadoActual[i] && lecturaA == lecturas[i]) {
            acciones.escribir = escribe[i];
            acciones.estado = estadoSig[i];
            acciones.cabezal = mueveCabezal[i];
            return acciones;
        }
    }
    return acciones;
}

int main() {
    int cinta[] = {0, 0, 1, 0, 1, 0, 0, 1};  // Valor binario de 41
    int cabezal = 7;
    int estado = 1;

    printf("Numero actual: ");
    int num = sizeof(cinta) / sizeof(cinta[0]);
    int decimalPrim = binario_a_decimal(cinta, num);
    printf("El numero binario es: ");
    int k=0;
    for (k = 0; k < num; k++) {
        printf("%d", cinta[k]);
    }
    printf("\nEn decimal es: %d\n", decimalPrim);

    // Ciclo de la m치quina de Turing para realizar la resta
    while (estado != 0) {  // La m치quina termina cuando el estado es 0
        if (cabezal >= 0 && cabezal < num) {
            printf("Estado actual %d, valor en cinta %d, ubicacion en cabezal: %d\n", 
                    estado, cinta[cabezal], cabezal);
            struct Acciones accionesLc = buscar(estado, cinta[cabezal]);
            cinta[cabezal] = accionesLc.escribir;
            estado = accionesLc.estado;
            cabezal += accionesLc.cabezal;
        } else {
            break;
        }
    }

    printf("Resultado final: ");
    int decimal = binario_a_decimal(cinta, num);
    printf("El numero binario es: ");
    int l=0;
    for (l = 0; l< num; l++) {
        printf("%d", cinta[l]);
    }
    printf("\nEn decimal es: %d\n", decimal);

    return 0;
}
